/*
SQLyog Trial v11.52 (64 bit)
MySQL - 5.5.25 : Database - portblog
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`portblog` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `portblog`;

/*Table structure for table `articles` */

DROP TABLE IF EXISTS `articles`;

CREATE TABLE `articles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `category_id` int(11) NOT NULL,
  `article` text NOT NULL,
  `status` int(11) NOT NULL,
  `is_date` date NOT NULL,
  `is_recomended` int(11) NOT NULL,
  `images` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;

/*Data for the table `articles` */

insert  into `articles`(`id`,`title`,`category_id`,`article`,`status`,`is_date`,`is_recomended`,`images`) values (1,'ООП в PHP',7,'Данная статья рассчитана на начинающих разработчиков в области ООП. Я работаю с пятой версией РНР, поэтому и статья рассчитана на эту версию.\r\n\r\nПервое, что необходимо понимать - класс это не набор функций или удобный контейнер для переменных, а абстрактный тип данных (АТД). Язык РНР не является строго типизированным языком, поэтому для начала необходимо разобраться с \"простыми\" типами. Целые числа (1, 45, 100, 378 и т.д.) имеют целочисленный тип, integer. Массивы – тоже тип данных. Более подробно с типами данных можно ознакомиться в документации - http://www.php.net/manual/ru/language.types.php. Класс также является типом данных, а объект - своеобразная переменная этого типа.\r\n\r\nПри создании класса чётко понять задачу, которую мы хотим представить. Часто построение класса является моделированием той сущности, которую необходимо перенести в код. Объект является отражением сущности, которая описана в виде класса. При моделировании класса стоит выявить те необходимые части сущности, над которыми будут производиться необходимые действия, с помощью методов. То есть необходимые части сущности являются полями класса, они как раз отражают данные, которые составляют общий тип данных. Этим тип объекта напоминает данные типа массив.\r\n\r\nМетоды выполняют разнообразные действия над данными. Методы следует проектировать так, чтобы они работали только с теми данными, которые определены в классе. Не рекомендуется определять методы, которые как-либо влияют на внешние данные. Так называемая стратегия слабого связывания - чем меньше связей между классами и внешними данными - тем проще извлечь класс из системы и повторно использовать его вновь.\r\n\r\nНапример, класс пачки сигарет состоит из упаковки и массива самих сигарет, следует создавать методы, которые работают только с упаковкой и сигаретами. Нет необходимости использовать методы, с помощью которых мы открываем бутылку газировки или даже прикуриваем сигарету. Каждый класс должен реализовывать только те действия, которые работают с данными самого класса. Не надо пытаться засунуть в один класс всю реализацию целого приложения. Например, есть сайт, который состоит из главной страницы, гостевой книги, страницы новостей, раздела статей и ссылок на дружественные сайты. Опишите каждый раздел сайта своим классом или классами. Классы, отражающие разделы сайта, могут вступать в наследование друг с другом. Т.е. мы представляем раздел как сущность, отдельный тип данных. Снова повторю, что в классе, моделирующем раздел новостей, не надо определять элементы других разделов, если нет необходимости. Если требуется что-то представить из других разделов, используйте включение. Например, пусть на странице новостей требуется вывести заголовки последних статей. Определите в классе новостей поле типа класса статей и используйте методы этого типа. Не надо пытаться писать методы, выводящие заголовки статей в классе, моделирующем новости. Определите необходимый метод в соответствующем классе, классе, представляющем статьи.',1,'2016-10-18',1,NULL),(2,'Что такое JS',9,'1.1 Введение в язык JavaScript\r\nАвтор: Denisido\r\n\r\nДата: 2010-06-04\r\n\r\nДля чего нужен JavaScript?\r\n\r\nЯзык программирования JavaScript (JS) придает веб-страницам возможность реагировать на действия пользователя и превращать статичные страницы в динамические, так, чтобы страницы буквально \"оживали\" на глазах.\r\n\r\nДанный язык программирования является клиентским (выполняется на стороне пользователя, без использования сервера). Если вы нацелены на изучение данного клиентского языка, то лучший способ сделать это - начать программировать на нем.\r\nЗдесь вы найдете все самое необходимое для создания собственных программ на JavaScript.\r\n\r\nДля начала работы с JavaScript вам понадобится текстовый редактор и браузер (IE, FF, OPERA, SF, CHROM и др.) для просмотра результата. Роль текстового редактора может выполнять обычный блокнот, WordPad (Windows) или VIM-редактор (Lunix, MacOC). Есть и профессиональные программы, такие как Dreamweaver (если вы начали изучать JavaScript, то скорее всего уже имеете с ним дело).\r\n\r\nДобавляем код JavaScript на страницу\r\n\r\nНиже показан пример обычной HTML страницы:\r\n\r\n<html> \r\n<head> \r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\" />\r\n<title>Введение в JS</title>\r\n</head>\r\n<body>\r\nТУТ ТЕЛО HTML\r\n</body>\r\n</html>\r\nДля того, чтобы добавить сценарий на страницу нужно дописать следующий код между тегами \r\n<script type=\"text/javascript\" > </script>, \r\nкоторые дают понять браузеру, что в дело вступает JavaScript.\r\n\r\nJavascript пример!\r\n<html> \r\n<head> \r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\" />\r\n<title>Введение в JS</title>\r\n<script type=\"text/javascript\">\r\n alert(\'Уроки JavaScript\');\r\n</script>\r\n</head>\r\n<body>\r\nТУТ ТЕЛО HTML\r\n</body>\r\n</html>\r\nСтрока 06. содержит пример кода на JavaScript (более подробно об этом будет рассказано далее).\r\n\r\nПрикрепление внешнего кода JavaScript на страницу\r\n\r\nИспользовать теги <script> можно только для текущей страницы. Но что делать, если вам нужно использовать один и тот же скрипт сразу на нескольких страницах? Для таких целей намного удобнее применять внешние файлы, рекомендуется в имени использовать расширения .js\r\n\r\nДля того, чтобы \"прикрутить\" внешний файл с расширением .js на страницу нужно в тег script добавить следующий атрибут src со значением, в котором прописываем нужный файл:\r\n\r\n<html> \r\n<head> \r\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1251\" />\r\n<title>Введение в JS</title>\r\n<script type=\"text/javascript\" src=\"kobru.js\"></script>\r\n</head>\r\n<body>\r\nТУТ ТЕЛО HTML\r\n</body>\r\n</html>\r\nФайл можно назвать как угодно, не обязательно kobru.js, можно например file.js. Теперь весь сценарий будет находится в отдельном файле. Внутри этого файла записывается чистый код:\r\n\r\n  \r\n alert(\'Уроки JavaScript\');',1,'2016-10-19',0,NULL),(3,'sdcwdwc',11,'sdcscsdcdc',1,'0000-00-00',1,NULL),(4,'dw',7,'awdawdawd',1,'0000-00-00',1,NULL),(5,'dw',7,'awdawdawd',1,'0000-00-00',1,NULL);

/*Table structure for table `category` */

DROP TABLE IF EXISTS `category`;

CREATE TABLE `category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `sort_order` int(11) NOT NULL,
  `status` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

/*Data for the table `category` */

insert  into `category`(`id`,`name`,`sort_order`,`status`) values (5,'HTML',1,1),(6,'CSS',2,1),(7,'PHP',3,1),(8,'SQL',4,1),(9,'JS',5,1),(10,'jQuery',6,1),(11,'Angular',7,1),(12,'node.js',8,1);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
